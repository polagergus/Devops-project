AWSTemplateFormatVersion: 2010-09-09
Description: Project2 App server 

Parameters: 
  EnvironmentName:
      Description: An environment name that will be prefixed to resource names
      Type: String

  InstanceType:
      Description: EC2 Instance Type
      Type: String

  InstanceRole:
    Description: EC2 Instance Role
    Type: String

  UbuntuImageID:
    Description: Ubuntu 18  
    Type: String

  SSHKeypair:
    Description: EC2 ssh Keypair 
    Type: String

  BucketName:
    Type: String
  HTMLIndexPrefix:
    Type: String

Resources:


# Create LoadBalancer Security Group 

  LoadBalancerSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      #GroupName: 
      GroupDescription: Allow all public traffic port 80
      VpcId:
        Fn::ImportValue:
          !Sub ${EnvironmentName}-VPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-LoadBalancerS.G


# Create Web Server Security Group 

  WebServerSecG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http and SSH
      VpcId:
        Fn::ImportValue:
          !Sub ${EnvironmentName}-VPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: 0
        ToPort: 65535
        CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-WebServerS.G


# Create the AutoScaling LaunchConfiguration 

  WebAppLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          apt-get update -y
          apt-get install unzip awscli -y
          apt-get install apache2 -y
          systemctl start apache2.service
          cd /var/www/html
          aws s3 cp "s3://${BucketName}/${HTMLIndexPrefix}" . 
      ImageId: !Ref UbuntuImageID
      #KeyName: !Ref SSHKeypair
      IamInstanceProfile: !Ref InstanceRole
      SecurityGroups:
      - Ref: WebServerSecG
      InstanceType: !Ref InstanceType
      BlockDeviceMappings:
      - DeviceName: "/dev/sdk"
        Ebs:
          VolumeSize: '10'


# Create the Web App LoadBalancer TargetGroup 

  WebAppTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 5
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 4
      HealthyThresholdCount: 2
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 5
      VpcId: 
        Fn::ImportValue:
          !Sub ${EnvironmentName}-VPC


# Create the Web App AutoScaling Group 

  WebAppGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
      - Fn::ImportValue: 
          !Sub "${EnvironmentName}-PrivateSubnets"
      LaunchConfigurationName:
        Ref: WebAppLaunchConfig
      MinSize: '2'
      DesiredCapacity: '2'
      MaxSize: '4'
      TargetGroupARNs:
      - Ref: WebAppTargetGroup


# Create the Web App LoadBalancer, LoadBalancer listner, and listner Rule 

  WebAppLB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets:
      - Fn::ImportValue: !Sub "${EnvironmentName}-PublicSubnet1"
      - Fn::ImportValue: !Sub "${EnvironmentName}-PublicSubnet2"
      SecurityGroups:
      - Ref: LoadBalancerSecGroup
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-WebAppLB
  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
      - Type: forward
        TargetGroupArn:
          Ref: WebAppTargetGroup
      LoadBalancerArn:
        Ref: WebAppLB
      Port: '80'
      Protocol: HTTP
  ALBListenerRule:
      Type: AWS::ElasticLoadBalancingV2::ListenerRule
      Properties:
        Actions:
        - Type: forward
          TargetGroupArn: !Ref 'WebAppTargetGroup'
        Conditions:
        - Field: path-pattern
          Values: [/]
        ListenerArn: !Ref 'Listener'
        Priority: 1

Outputs:

  LoadBalancerSecGroup:
    Description:  Load Balancer Security Group
    Value: !Ref LoadBalancerSecGroup
    Export:
      Name: !Sub ${EnvironmentName}-LoadBalancerSecGroup

  WebServerSecG:
    Description:  Web Servers Security Group
    Value: !Ref WebServerSecG
    Export:
      Name: !Sub ${EnvironmentName}-WebServerSecG

  LaunchConf:
    Description:  Web Servers Launch Template Configuration 
    Value: !Ref WebAppLaunchConfig
    Export:
      Name: !Sub ${EnvironmentName}-WebAppLaunchConfig

  WebAppLB:
    Description:  Web Application Load Balancer 
    Value: !Ref WebAppLB
    Export:
      Name: !Sub ${EnvironmentName}-WebAppLB

  LoadBalancerURL:
    Description:  Web Application Load Balancer 
    Value: !Join [ "", [ 'http://', !GetAtt WebAppLB.DNSName ]]
    